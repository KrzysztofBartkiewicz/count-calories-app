{"version":3,"sources":["pages/homepage/homepage.jsx","App.js","serviceWorker.js","index.js"],"names":["Homepage","props","state","result","devices","codeReader","BrowserQRCodeReader","listVideoInputDevices","this","setState","console","log","code","decodeOnceFromVideoDevice","deviceId","className","id","label","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4YAgEeA,E,kDA1Db,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,OAAQ,MACRC,QAAS,WALM,E,2LAUXC,EAAa,IAAIC,sB,SAEDD,EAAWE,wB,cAA3BH,E,OACNI,KAAKC,SAAS,CAAEL,QAASA,IACzBM,QAAQC,IAAIP,GAERQ,EAAO,K,mBAGIP,EAAWQ,0BACtBT,EAAQ,GAAGU,SACX,S,QAFFF,E,yDAKAF,QAAQC,IAAR,M,QAGFD,QAAQC,IAAIC,GACZJ,KAAKC,SAAS,CAAEN,OAAQS,I,+IAWxB,OACE,0BAAMG,UAAU,YACd,2BAAOC,GAAG,UACV,8BACGR,KAAKN,MAAME,QAAQ,GAAGU,SACvB,6BACCN,KAAKN,MAAME,QAAQ,GAAGa,OAEzB,8BACGT,KAAKN,MAAME,QAAQ,GAAGU,SACvB,6BACCN,KAAKN,MAAME,QAAQ,GAAGa,OAEzB,8BAAOT,KAAKN,MAAMC,a,GArDHe,IAAMC,WCOdC,MARf,WACE,OACE,yBAAKL,UAAU,OACb,kBAAC,EAAD,QCKcM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.66c7ecd8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './homepage.scss';\r\nimport Button from '../../components/button/button';\r\nimport { BrowserQRCodeReader } from '@zxing/library';\r\n\r\nclass Homepage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      result: '---',\r\n      devices: 'devices',\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const codeReader = new BrowserQRCodeReader();\r\n\r\n    const devices = await codeReader.listVideoInputDevices();\r\n    this.setState({ devices: devices });\r\n    console.log(devices);\r\n\r\n    let code = null;\r\n\r\n    try {\r\n      code = await codeReader.decodeOnceFromVideoDevice(\r\n        devices[1].deviceId,\r\n        'video'\r\n      );\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n    \r\n    console.log(code);\r\n    this.setState({ result: code });\r\n\r\n    // const firstDeviceId = devices[0].deviceId;\r\n\r\n    // codeReader\r\n    //   .decodeOnceFromVideoDevice(firstDeviceId, 'video')\r\n    //   .then((result) => console.log(result.text))\r\n    //   .catch((err) => console.error(err));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <main className=\"homepage\">\r\n        <video id=\"video\"></video>\r\n        <span>\r\n          {this.state.devices[0].deviceId}\r\n          <br />\r\n          {this.state.devices[0].label}\r\n        </span>\r\n        <span>\r\n          {this.state.devices[1].deviceId}\r\n          <br />\r\n          {this.state.devices[0].label}\r\n        </span>\r\n        <span>{this.state.result}</span>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Homepage;\r\n","import React from 'react';\nimport './App.css';\nimport Homepage from './pages/homepage/homepage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Homepage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}